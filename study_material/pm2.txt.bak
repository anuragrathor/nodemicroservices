
PM2 :
	PM2 is a daemon process manager that will help you manage and keep your application online.
	
	
	
Installation :
	The latest PM2 version is installable with NPM or Yarn:

	$ npm install pm2@latest -g
	# or
	$ yarn global add pm2


Start an app :

	$ pm2 start app.js

	Or start any other application easily:

	$ pm2 start bashscript.sh
	$ pm2 start python-app.py --watch
	$ pm2 start binary-file -- --port 1520

	Some options you can pass to the CLI:

	# Specify an app name
	--name <app_name>

	# Watch and Restart app when files change
	--watch

	# Set memory threshold for app reload
	--max-memory-restart <200MB>

	# Specify log file
	--log <log_path>

	# Pass extra arguments to the script
	-- arg1 arg2 arg3

	# Delay between automatic restarts
	--restart-delay <delay in ms>

	# Prefix logs with time
	--time

	# Do not auto restart app
	--no-autorestart

	# Specify cron for forced restart
	--cron <cron_pattern>

	# Attach to application log
	--no-daemon


Managing processes :

	Managing application state is simple here are the commands:

	$ pm2 restart app_name
	$ pm2 reload app_name
	$ pm2 stop app_name
	$ pm2 delete app_name

	
	Instead of app_name you can pass:

		all to act on all processes
		id to act on a specific process id
		name of that process id if we pass it


Check status, logs, metrics :

	you can check its status, logs, metrics and even get the online dashboard with pm2.io. List managed applications

	List the status of all application managed by PM2:

	$ pm2 [list|ls|status]
	$ pm2 list
	$ pm2 ls
	$ pm2 status
	
	
Display logs :

	To display logs in realtime:
	$ pm2 logs

	To dig in older logs:
	$ pm2 logs --lines 200


Terminal Based Dashboard :

	Here is a realtime dashboard that fits directly into your terminal:

	$ pm2 monit



Configuration File :

	When managing multiple applications with PM2, use a JS configuration file to organize them.
	Generate configuration

	To generate a sample configuration file you can type this command:

	$ pm2 init simple

	This will generate a sample ecosystem.config.js:

	module.exports = {
	  apps : [{
		name   : "app1",
		script : "./app.js"
	  }]
	}



Seamlessly than acting on an app you can start/stop/restart/delete all apps contained in a configuration file:

	# Start all applications
	pm2 start ecosystem.config.js

	# Stop all
	pm2 stop ecosystem.config.js

	# Restart all
	pm2 restart ecosystem.config.js

	# Reload all
	pm2 reload ecosystem.config.js

	# Delete all
	pm2 delete ecosystem.config.js



Act on a specific process

	You can also act on a particular application by using its name and the option --only <app_name>:

	pm2 start   ecosystem.config.js --only api-app

	# Start Specific APP 
	pm2 start ecosystem.config.js --only Product
	
	Note: the --only option works for start/restart/stop/delete as well


You can even specify multiple apps to be acted on by specifying each app name separated by a comma:

	pm2 start ecosystem.config.js --only "api-app,worker-app"


Switching environments :

	You can specify different environment variable set via the env_* option.

	Example:

	module.exports = {
	  apps : [{
		name   : "app1",
		script : "./app.js",
		env_production: {
		   NODE_ENV: "production"
		},
		env_development: {
		   NODE_ENV: "development"
		}
	  }]
	}

	Now to switch between variables in different environment, specify the --env [env name] option:

	pm2 start process.json --env production
	pm2 restart process.json --env development






CheatSheet :

	Here are some commands that are worth knowing. Just try them with a sample application or with your current web application on your development machine:

	# Fork mode
	pm2 start app.js --name my-api # Name process

	# Cluster mode
	pm2 start app.js -i 0        # Will start maximum processes with LB depending on available CPUs
	pm2 start app.js -i max      # Same as above, but deprecated.
	pm2 scale app +3             # Scales `app` up by 3 workers
	pm2 scale app 2              # Scales `app` up or down to 2 workers total

	# Listing

	pm2 list               # Display all processes status
	pm2 jlist              # Print process list in raw JSON
	pm2 prettylist         # Print process list in beautified JSON

	pm2 describe 0         # Display all information about a specific process

	pm2 monit              # Monitor all processes

	# Logs

	pm2 logs [--raw]       # Display all processes logs in streaming
	pm2 flush              # Empty all log files
	pm2 reloadLogs         # Reload all logs

	# Actions

	pm2 stop all           # Stop all processes
	pm2 restart all        # Restart all processes

	pm2 reload all         # Will 0s downtime reload (for NETWORKED apps)

	pm2 stop 0             # Stop specific process id
	pm2 restart 0          # Restart specific process id

	pm2 delete 0           # Will remove process from pm2 list
	pm2 delete all         # Will remove all processes from pm2 list

	# Misc

	pm2 reset <process>    # Reset meta data (restarted time...)
	pm2 updatePM2          # Update in memory pm2
	pm2 ping               # Ensure pm2 daemon has been launched
	pm2 sendSignal SIGUSR2 my-app # Send system signal to script
	pm2 start app.js --no-daemon
	pm2 start app.js --no-vizion
	pm2 start app.js --no-autorestart

